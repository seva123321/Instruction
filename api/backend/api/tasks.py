from datetime import timedelta

from asgiref.sync import async_to_sync
from celery import shared_task
from django.utils import timezone
from django.conf import settings
import logging
from telegram import Bot

from .models import DutySchedule, User
from backend.constants import POWER_OF_USER


logger = logging.getLogger(__name__)


@shared_task(expires=600)
def send_instruction_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–µ"""
    now = timezone.now() + timedelta(hours=3)
    reminder_time = now + timedelta(minutes=15)

    try:
        upcoming_shifts = DutySchedule.objects.filter(
            date=now.date(),
            shift__start_time=reminder_time.time().strftime("%H:%M:%S"),
        ).select_related("user", "shift", "instruction")
        for schedule in upcoming_shifts:
            if schedule.user.telegram_chat_id:
                message = (
                    f"üéÆ –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è, {schedule.shift.name}! –ù–æ–≤–∞—è –º–∏—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞! üèóÔ∏è\n"
                    f"‚è± –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: \n"
                    f"üîß –ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂: {schedule.instruction.name if schedule.instruction else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"*–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞*: {schedule.shift.start_time.strftime('%H:%M')}\n"
                    f"üí• –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: +50 XP"
                )
                try:
                    async_to_sync(_send_message)(message, schedule.user.telegram_chat_id)
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {schedule.user_id}: {str(e)}"
                    )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ send_instruction_reminders: {str(e)}")
        raise


@shared_task(expires=600)
def send_game_notification():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    users = User.objects.filter(
        telegram_chat_id__isnull=False,
        role="user"
    ).select_related("power_of_user")
    try:
        for user in users:
            user.power_of_user.power = POWER_OF_USER
            user.power_of_user.save()
            message = (f'üéÆ –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è, {user.first_name},\n'
                       f'üí™ –¢–≤–æ–∏ *–ú–ï–ì–ê–°–ò–õ–´* –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! üÜô‚úÖ\n'
                       'üí• –ü–æ–ø—Ä–æ–±—É–π –∏—Ö –≤ –∏–≥—Ä–µ! üí•\n')
            async_to_sync(_send_message)(message, user.telegram_chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {str(e)}")


async def _send_message(message: str, telegram_chat_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)

        await bot.send_message(
            chat_id=telegram_chat_id,
            text=message,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

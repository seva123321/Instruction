from datetime import timedelta
from random import choice

import asyncio
from celery import shared_task
from django.utils import timezone
from django.conf import settings
import logging

logger = logging.getLogger(__name__)


# –õ–µ–Ω–∏–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def get_models():
    from .models import DutySchedule, Notification
    from telegram import Bot

    return DutySchedule, Notification, Bot


@shared_task(expires=600)
def send_instruction_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–µ"""
    DutySchedule, _, Bot = get_models()

    now = timezone.now()
    reminder_time = now + timedelta(minutes=15)
    print(reminder_time)

    try:
        upcoming_shifts = DutySchedule.objects.filter(
            date=now.date(),
            shift__start_time__gte=(
                reminder_time - timedelta(minutes=1)
            ).time(),
            shift__start_time__lte=(
                reminder_time + timedelta(minutes=1)
            ).time(),
        ).select_related("user", "shift", "instruction")
        print(upcoming_shifts.count())
        for schedule in upcoming_shifts:
            if schedule.user.telegram_chat_id:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)

                message = (
                    f"üéÆ –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è, {schedule.shift.name}! –ù–æ–≤–∞—è –º–∏—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞! üèóÔ∏è\n"
                    f"‚è± –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: \n"
                    f"üîß –ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ {schedule.instruction.name if schedule.instruction else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"*–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞*: {schedule.shift.start_time.strftime('%H:%M')}\n"
                    f"üí• –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: +50 XP"
                )
                try:
                    asyncio.run(
                        _send_instruction_reminders(
                            message, schedule.user.telegram_chat_id
                        )
                    )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {schedule.user_id}: {str(e)}"
                    )
                finally:
                    loop.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ send_instruction_reminders: {str(e)}")
        raise


async def _send_instruction_reminders(message, telegram_chat_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–µ"""
    DutySchedule, _, Bot = get_models()
    try:
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)

        await bot.send_message(
            chat_id=telegram_chat_id, text=message, parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(e)
